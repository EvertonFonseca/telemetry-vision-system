box::use(setor)
box::use(setor[])
box::use(./setor)
box::use(
shiny[div, tags, textOutput, HTML, renderText, moduleServer, NS],
semantic.dashboard[
dashboardPage, dashboardHeader, dashboardSidebar,
sidebarMenu, menuItem, tabItems, tabItem, dashboardBody
],
shiny.semantic[icon],
waiter[use_waiter],
../logic/time[format_br],
./setor[ui = setor_ui, server = setor_server],
./placeholder[ui = ph_ui, server = ph_server]
)
box::use(./setor[ui = setor_ui, server = setor_server])
box::use(
shiny[moduleServer, NS, div, tabsetPanel, tabPanel, renderUI, uiOutput, p],
waiter[withWaiter]
)
box::use(./setor[ui = setor_ui, server = setor_server])
box::use(./setor[ui = setor_ui, server = setor_server])
box::use(./setor[ui, server])
box::use(./setor[setor_ui = ui,setor_server = server])
Ambiente <- R6::R6Class("Ambiente",list(
df       = NULL,
day_min  = NULL,
day_max  = NULL,
targets  = NULL,
target   = NULL,
momentos = NULL,
frota_max = NULL,
frente_max = NULL,
max_reward = NULL,
min_reward = NULL,
reward_hist = NULL,
reward_hist_neg = NULL,
alocacoes_max = NULL,
half = NULL,
initialize = function(df,frota_max  = 2,frente_max = 8,alocacoes_max = 32){
self$df         <- df
self$max_reward <- max(df$reward)
self$min_reward <- min(df$reward)
self$day_min    <- min(df$DAY)
self$day_max       <- max(df$DAY)
self$momentos   <- c("I","C","V","U")
self$frota_max     <- frota_max
self$frente_max    <- frente_max
self$alocacoes_max <- alocacoes_max
},step = function(action_frota,action_frente){
frota_choose  <- self$target$frota_choose
frente_choose <- self$target$frente_choose
bonus         <- self$target$SEQ > self$half
done          <- self$target$done
frentes_op    <- self$target$opcoes_frentes[[1]]
reward        <- self$target$reward
if((action_frente == 1) & reward < 0){
reward <- 10
}else if(action_frente == 1 & reward >= 0){
reward <- -10
}else if(action_frente > 1 & (frente_choose != action_frente)){
frentes <- self$target$state_frentes[[1]]
acao    <- action_frente - 1
if(!is.null(frentes_op)){
frentes      <- left_join(frentes,frentes_op,"CD_FAZENDA_LIBERADA")
#frentes      <- frentes |> filter(EXCESSOCAMINHAO == 0 & TRANSPORTELIBERADO == 1)
frentes      <- frentes |> filter(EXCESSOCAMINHAO == 0)
frentes$good <- frentes$reward > 0
frente_t     <- frentes |> filter(row == acao)
if(any(frentes$good) & nrow(frente_t) == 0){
reward <- -10
}else if(nrow(frente_t) > 0){
reward <- frente_t$reward
}
}else{
reward <- -10
}
}
# Avança para a próxima observação, se não estiver terminado
if (!done) {
self$reward_hist[self$target$SEQ] <- reward
} else {
obs    <- NULL
self$reward_hist <- rep(0,length(self$reward_hist))
}
obs  <- NULL
if(self$target$SEQ < max(self$targets$SEQ)){
self$target <- self$targets[self$targets$SEQ > self$target$SEQ,] |> first()
obs         <- self$observe()
}
list(observe = obs, reward = reward, done = done)
},reset = function(day = self$day_min){
self$targets <- self$df[which(self$df$DAY == day),] |>
arrange(DATA_SAIDA) |>
mutate(SEQ = row_number())
self$target      <- self$targets |> first()
self$reward_hist <- rep(0,nrow(self$targets))
self$half        <- as.integer(max(self$targets$SEQ) / 2)
return(invisible(NULL))
},observe = function(){
state_frota    <- self$target$state_frotas[[1]]
state_frente   <- self$target$state_frentes[[1]]
state_alocacao <- self$target$state_alocacao[[1]]
mask_frotas    <- rep(0,self$frota_max)
mask_frotas[1] <- 1
mask_frentes    <- rep(0,self$frente_max)
mask_frentes[1] <- 1
mask_alocacoes  <- rep(0,self$alocacoes_max)
if(nrow(state_frota) > 0){
state_frota       <- array(nrow(state_frota) / self$frota_max,c(1,1))
mask_frotas[2]    <- 1
}
if(nrow(state_frente) > 0){
colhedoras       <- state_frente$COLHEDORAS
reboques         <- state_frente$REBOQUES
COLHEDORASOP     <- state_frente$COLHEDORASOP
REBOQUESOP       <- state_frente$REBOQUESOP
METAATUAL        <- state_frente$METAATUAL
METADIA          <- state_frente$METADIA + 1e-8
meta              <- METAATUAL / METADIA
EXCESSOCAMINHAO   <- state_frente$EXCESSOCAMINHAO
#liberado_frente   <- state_frente$TRANSPORTELIBERADO
tempo_colhedora <-
ifelse(is.na(state_frente$TEMPOMEDIOCOLHEDORA),0,state_frente$TEMPOMEDIOCOLHEDORA)
state_frente$TEMPOMEDIOCOLHEDORA
tempo_reboque <-
ifelse(is.na(state_frente$TEMPOMEDIOREBOQUE),0,state_frente$TEMPOMEDIOREBOQUE)
#CAMINHAOALOCADO    <- state_frente$CAMINHAOALOCADO
# CAMINHAOINDO       <- state_frente$CAMINHAOINDO
# CAMINHAOCARREGANDO <- state_frente$CAMINHAOCARREGANDO
# CAMINHAOVOLTANDO   <- state_frente$CAMINHAOVOLTANDO
distancia          <- state_frente$DISTANCIA
state_frente <- cbind(self$normalizeTensor(colhedoras),
self$normalizeTensor(reboques),
self$normalizeTensor(COLHEDORASOP),
self$normalizeTensor(REBOQUESOP),
self$normalizeTensor(tempo_colhedora),
self$normalizeTensor(tempo_reboque),
# self$normalizeTensor(CAMINHAOALOCADO),
# self$normalizeTensor(CAMINHAOINDO),
# self$normalizeTensor(CAMINHAOCARREGANDO),
# self$normalizeTensor(CAMINHAOVOLTANDO),
EXCESSOCAMINHAO,
#liberado_frente,
meta,
self$normalizeTensor(distancia))
#mask_liberada <- as.integer(EXCESSOCAMINHAO == 0 & liberado_frente == 1)
mask_liberada <- as.integer(EXCESSOCAMINHAO == 0)
mask_frentes[2:(nrow(state_frente) + 1)] <- mask_liberada
}
if(nrow(state_alocacao) > 0){
frenteParentes <- self$normalizeTensor(state_alocacao$CD_FAZENDA_LIBERADA_INDEX)
#peso_min        <- state_alocacao$PESO_MINIMO
#peso_max        <- state_alocacao$PESO_MAXIMO
dummy           <- self$momento_dummy(state_alocacao$SITUACAO)
momentoPer      <- ifelse(is.na(state_alocacao$PERCENTUAL_ETAPA),0,state_alocacao$PERCENTUAL_ETAPA)
state_alocacao <- cbind(frenteParentes,dummy,momentoPer)
mask_alocacoes[1:nrow(state_alocacao)] <- 1
}else{
state_alocacao  <- torch_tensor(array(rep(0,6),dim = c(1,6)))
}
list(state_frota    = state_frota,
state_frente   = state_frente,
state_alocacao = state_alocacao,
mask_frotas    = mask_frotas,
mask_frentes   = mask_frentes,
mask_alocacoes = mask_alocacoes)
},momento_dummy = function(momentos){
n <- length(momentos)
dummy <- array(0,dim = c(n,4))
for (i in 1:n) {
momento <- momentos[i]
if(momento == "I"){
dummy[i,] <- c(1,0,0,0)
}else if(momento == "C"){
dummy[i,] <- c(0,1,0,0)
}else if(momento == "U"){
dummy[i,] <- c(0,0,1,0)
}else{
dummy[i,] <- c(0,0,0,1)
}
}
dummy
},
normalizeTensor = function(input, p = 2.0, dim = 1, eps = 1e-12) {
# Garantir que input seja numérico
input <- as.numeric(input)
# Calcular a norma ao longo da dimensão especificada
if (dim == 1) {
# Norma L-p do vetor
norm_val <- (sum(abs(input)^p))^(1/p)
} else if (dim == 2 & is.matrix(input)) {
# Norma L-p por coluna (se input for uma matriz)
norm_val <- apply(input, 2, function(x) (sum(abs(x)^p))^(1/p))
} else {
stop("Dimensão inválida ou input não compatível.")
}
# Aplicar clamp_min: garantir que norm_val seja pelo menos eps
norm_val <- pmax(norm_val, eps)  # <<< Aqui está o equivalente ao clamp_min
# Normalizar o input
if (dim == 1) {
normalized <- input / norm_val
} else if (dim == 2) {
normalized <- t(t(input) / norm_val)  # Normalizar cada coluna
}
# Retornar como vetor
as.vector(normalized)
}
))
