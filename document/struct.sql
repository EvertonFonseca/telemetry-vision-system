SET GLOBAL event_scheduler = ON;

#EVENTS
DROP EVENT IF EXISTS AG_BY_1_DAY;
#PROCEDURES
DROP PROCEDURE IF EXISTS PR_CLEAR_OLD_DATAS;
#TABLES
DROP TABLE IF EXISTS OBJETO_VIEW;
DROP TABLE IF EXISTS ATRIBUTO;
DROP TABLE IF EXISTS TIPO_DATA;
DROP TABLE IF EXISTS COMPONENTE;
DROP TABLE IF EXISTS OBJETO;
DROP TABLE IF EXISTS FRAME_CAMERA;
DROP TABLE IF EXISTS CAMERA_CONFIG;
DROP TABLE IF EXISTS CAMERA_VIEW; 
DROP TABLE IF EXISTS SETOR;

CREATE TABLE IF NOT EXISTS SETOR(
                 CD_ID_SETOR INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
                 NAME_SETOR VARCHAR(50) NOT NULL,
                 TEMPO_REATIVAR_SETOR INTEGER NOT NULL,
                 TEMPO_REATIVAR_UNIDADE_SETOR VARCHAR(50) NOT NULL,
                 TEMPO_PASSADO_SETOR  INTEGER NOT NULL,
                 TEMPO_PASSADO_UNIDADE_SETOR VARCHAR(50) NOT NULL,
                 CD_ID_USER  INTEGER,
                 FG_ATIVO BOOLEAN DEFAULT 0
                 );

CREATE TABLE IF NOT EXISTS CAMERA_VIEW(
                 CD_ID_CAMERA  INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
                 NAME_CAMERA   VARCHAR(100)  NOT NULL,
                 URL_CAMERA    VARCHAR(200) NOT NULL
                 );

CREATE TABLE IF NOT EXISTS CAMERA_CONFIG(
                 CD_ID_CAMERA_HIST  INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
                 CD_ID_CAMERA   INTEGER NOT NULL,
                 FPS_CAMERA     INTEGER NOT NULL,
                 DT_HR_LOCAL    TIMESTAMP  DEFAULT CURRENT_TIMESTAMP,
                 FOREIGN KEY (CD_ID_CAMERA) REFERENCES CAMERA_VIEW(CD_ID_CAMERA) ON DELETE CASCADE
                 );

CREATE TABLE IF NOT EXISTS FRAME_CAMERA(
              CD_ID_FRAME   INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
              DATA_FRAME    LONGBLOB NOT NULL,
              DT_HR_LOCAL   TIMESTAMP  DEFAULT CURRENT_TIMESTAMP,
              CD_ID_CAMERA  INTEGER NOT NULL,
              FOREIGN KEY (CD_ID_CAMERA) REFERENCES CAMERA_VIEW(CD_ID_CAMERA) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS OBJETO(
                 CD_ID_OBJETO INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
                 NAME_OBJETO VARCHAR(100)  NOT NULL,
                 CD_ID_SETOR INTEGER NOT NULL,
                 FOREIGN KEY (CD_ID_SETOR) REFERENCES SETOR(CD_ID_SETOR)  ON DELETE CASCADE
                 );

CREATE TABLE IF NOT EXISTS COMPONENTE(
                 CD_ID_COMPONENTE  INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
                 NAME_COMPONENTE   VARCHAR(100) NOT NULL,
                 CD_ID_OBJETO INTEGER NOT NULL,
                 FOREIGN KEY (CD_ID_OBJETO) REFERENCES OBJETO(CD_ID_OBJETO)  ON DELETE CASCADE
                 );

CREATE TABLE IF NOT EXISTS TIPO_DATA(
                 CD_ID_DATA   INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
                 NAME_DATA    VARCHAR(100) NOT NULL,
                 R_DATA       TEXT);   

CREATE TABLE IF NOT EXISTS ATRIBUTO(
                 CD_ID_ATRIBUTO    INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
                 CD_ID_COMPONENTE  INTEGER NOT NULL,
                 NAME_ATRIBUTO     VARCHAR(100) NOT NULL,
                 FG_ATIVO          BOOLEAN DEFAULT 0,
                 CD_ID_DATA        INTEGER NOT NULL,
                 FOREIGN KEY (CD_ID_DATA) REFERENCES TIPO_DATA(CD_ID_DATA),
                 FOREIGN KEY (CD_ID_COMPONENTE) REFERENCES COMPONENTE(CD_ID_COMPONENTE) ON DELETE CASCADE
			    );

CREATE TABLE IF NOT EXISTS OBJETO_VIEW(
                 CD_ID_OV     INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
                 NAME_OV      VARCHAR(100)  NOT NULL,
                 CD_ID_CAMERA INTEGER NOT NULL,
                 CD_ID_OBJETO INTEGER NOT NULL,
                 FG_ATIVO    BOOLEAN DEFAULT 0,
                 FOREIGN KEY (CD_ID_CAMERA) REFERENCES CAMERA_VIEW(CD_ID_CAMERA),
                 FOREIGN KEY (CD_ID_OBJETO) REFERENCES OBJETO(CD_ID_OBJETO)
                 );

-- FRAME_CAMERA: consultas por câmera + intervalo de datas
ALTER TABLE FRAME_CAMERA
  ADD INDEX idx_frame_cam_dt (CD_ID_CAMERA, DT_HR_LOCAL),
  ADD INDEX idx_frame_dt (DT_HR_LOCAL);

-- Observação: o índice (CD_ID_CAMERA, DT_HR_LOCAL) já atende:
--   WHERE CD_ID_CAMERA = ? AND DT_HR_LOCAL BETWEEN ? AND ?
-- e também ORDER BY DT_HR_LOCAL [DESC] LIMIT 1 (o MySQL pode ler o índice "para trás").

-- CAMERA_CONFIG: pegar a config mais recente por câmera
ALTER TABLE CAMERA_CONFIG
  ADD INDEX idx_camcfg_cam_dt (CD_ID_CAMERA, DT_HR_LOCAL);

-- OBJETO_VIEW: filtros por câmera/objeto e “ativos”
ALTER TABLE OBJETO_VIEW
  ADD INDEX idx_objv_cam_obj_ativo (CD_ID_CAMERA, CD_ID_OBJETO, FG_ATIVO);

-- Demais FKs (otimiza joins frequentes)
ALTER TABLE OBJETO
  ADD INDEX idx_obj_setor (CD_ID_SETOR);

ALTER TABLE COMPONENTE
  ADD INDEX idx_comp_obj (CD_ID_OBJETO);

ALTER TABLE ATRIBUTO
  ADD INDEX idx_attr_comp (CD_ID_COMPONENTE),
  ADD INDEX idx_attr_data (CD_ID_DATA),
  ADD INDEX idx_attr_comp_ativo (CD_ID_COMPONENTE, FG_ATIVO);